{"version":3,"sources":["components/HomeComponent.js","components/AboutComponent.js","components/UserComponent.js","components/NavbarComponent.js","App.js","serviceWorker.js","index.js"],"names":["DistanceInput","_handleChange","e","props","onChangeDistance","target","value","this","distanceLabel","type","distance","onChange","React","Component","HomeComponent","onChangeMeter","meter","kilometer","parseFloat","toString","setState","onChangeKilometer","state","preventDefault","Card","CardBody","AboutComponent","UserComponent","onSubmit","bind","inputNama","createRef","inputPhone","inputAddress","inputEmail","alert","current","Form","FormGroup","name","placeholder","ref","id","cols","rows","Button","color","NavbarComponent","useState","isOpen","setIsOpen","Navbar","light","expand","to","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d07661c.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport '../App.css';\r\nimport { Card, CardBody, CardText } from \"reactstrap\";\r\n\r\n\r\nclass DistanceInput extends React.Component {\r\n  \r\n  _handleChange = (e) => {\r\n    this.props.onChangeDistance(e.target.value);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <label>\r\n          {this.props.distanceLabel === 'M' ? 'Meter ' : 'Kilometer '}\r\n          <input type=\"number\" value={this.props.distance} onChange={this._handleChange}/>\r\n        </label>\r\n      </div>  \r\n    )\r\n  }\r\n}\r\n\r\nclass HomeComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      meter: 0,\r\n      kilometer: 0\r\n    }\r\n  }\r\n\r\n  onChangeMeter = (meter) => {\r\n    let kilometer = (parseFloat(meter) / 1000).toString();\r\n    this.setState({meter, kilometer})\r\n  }\r\n\r\n  onChangeKilometer = (kilometer) => {\r\n    let meter = (parseFloat(kilometer) * 1000).toString();\r\n    this.setState({meter, kilometer})\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    \r\n    return(\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <form>\r\n                        <DistanceInput distanceLabel=\"K\" distance={this.state.kilometer} onChangeDistance={this.onChangeKilometer}/>\r\n                        <DistanceInput distanceLabel=\"M\" distance={this.state.meter} onChangeDistance={this.onChangeMeter}/>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n  ) \r\n      \r\n  };\r\n}\r\nexport default HomeComponent;","import React from 'react';\r\nimport { Card, CardBody, CardText } from \"reactstrap\";\r\n\r\n\r\nconst AboutComponent = () => {\r\n    return(\r\n        <Card>\r\n            <CardBody>\r\n                <p>Powered by React Javascript & Boostrap</p>\r\n                <p>Made for Sanbercode Final Project </p>\r\n                <br/>\r\n                <h3>Created by Nico</h3>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default AboutComponent;","import React from 'react';\r\nimport '../App.css';\r\nimport { Card, CardBody, Button, Form, FormGroup } from \"reactstrap\";\r\n\r\nclass UserComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.onSubmit = this.onSubmit.bind(this)\r\n    this.inputNama = React.createRef();\r\n    this.inputPhone = React.createRef();\r\n    this.inputAddress = React.createRef();\r\n    this.inputEmail = React.createRef();\r\n  }\r\n\r\n  onSubmit(e) {\r\n    alert(`Name: ${this.inputNama.current.value}, Phone Number: ${this.inputPhone.current.value}, Address: ${this.inputAddress.current.value}, Email: ${this.inputEmail.current.value}`)\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n\r\n       <Card>\r\n           <CardBody>\r\n                <Form onSubmit={this.onSubmit}>\r\n                  <FormGroup>\r\n                    <input type=\"text\" name='name' placeholder='Name' ref={this.inputNama}/>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <input type=\"number\" name=\"phone\" placeholder=\"Phone Number\" ref={this.inputPhone}/>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <textarea name=\"address\" id=\"\" cols=\"30\" rows=\"3\" placeholder=\"Address\" ref={this.inputAddress}></textarea>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <input type=\"email\" name='email' placeholder='Email' ref={this.inputEmail}/>\r\n                  </FormGroup>\r\n                    <Button type='submit' color=\"primary\">Check</Button>\r\n                </Form>\r\n                \r\n           </CardBody>\r\n       </Card>\r\n\r\n  ) \r\n      \r\n  };\r\n}\r\nexport default UserComponent;","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { \r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link } from \"react-router-dom\";\r\nimport HomeComponent from \"./HomeComponent\";\r\nimport AboutComponent from './AboutComponent';\r\nimport UserComponent from './UserComponent';\r\n\r\nconst NavbarComponent = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <Link to='/'><NavbarBrand>DISTANCE CALCULATOR</NavbarBrand></Link>\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"mr-auto\" navbar>\r\n              <NavItem>\r\n                <Link to='/about'><NavLink>About</NavLink></Link>\r\n              </NavItem>\r\n              <NavItem>\r\n                <Link to='/users'><NavLink>Users</NavLink></Link>\r\n              </NavItem>\r\n            </Nav>\r\n            \r\n          </Collapse>\r\n        </Navbar>\r\n\r\n        <Switch>\r\n          <Route path='/' exact component={HomeComponent}></Route>\r\n          <Route path=\"/about\" component={AboutComponent}></Route>\r\n          <Route path=\"/Users\"><UserComponent/></Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default NavbarComponent;","import React from 'react';\nimport './App.css';\nimport NavbarComponent from './components/NavbarComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}